# 配合自定义的拦截器来使用,需要的自定义的程序打包放到flume的lib下面

# multiplexing 这种的channel实现了拦截器向不同的channel发送不同的数据

# define agent
a1.sources = r1
a1.channels = c1 c2
a1.sinks = k1 k2

# source
a1.sources.r1.type = exec
a1.sources.r1.command = tail -F /etc/software/flume-file.txt
a1.sources.r1.shell = /bin/bash -c

# channels
a1.channels.c1.type = memory
a1.channels.c1.capacity = 1000
a1.channels.c1.transactionCapacity = 100

a1.channels.c2.type = memory
a1.channels.c2.capacity = 1000
a1.channels.c2.transactionCapacity = 100

# sink
a1.sinks.k1.type = avro
a1.sinks.k1.hostname = 192.168.3.107
a1.sinks.k1.port = 4545

a1.sinks.k2.type = avro
a1.sinks.k2.hostname = 192.168.3.107
a1.sinks.k2.port = 4141

# bind
a1.sources.r1.channels = c1 c2
a1.sinks.k1.channel = c1
a1.sinks.k2.channel = c2

# 如果直到这里的话就是默认的副本的形式
# interpretor + channel selector

# interceptor 只有一个没成为链
a1.sources.r1.interceptors = i1
a1.sources.r1.interceptors.i1.type = big_data_self_learn.flume.Interceptor_channelSelector.flume_interceptor


# channel selector
# type字段是程序里定义的 key
# maping.value是定义的对于同一个key的不用的values去向不用的channel
a1.sources.r1.selector.type = multiplexing
a1.sources.r1.selector.header = type
a1.sources.r1.selector.mapping.click = c1
a1.sources.r1.selector.mapping.view = c2

